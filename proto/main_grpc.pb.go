// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftVotingClient is the client API for RaftVoting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftVotingClient interface {
	RequestVotes(ctx context.Context, in *Term, opts ...grpc.CallOption) (*Vote, error)
}

type raftVotingClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftVotingClient(cc grpc.ClientConnInterface) RaftVotingClient {
	return &raftVotingClient{cc}
}

func (c *raftVotingClient) RequestVotes(ctx context.Context, in *Term, opts ...grpc.CallOption) (*Vote, error) {
	out := new(Vote)
	err := c.cc.Invoke(ctx, "/com.RaftVoting/RequestVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftVotingServer is the server API for RaftVoting service.
// All implementations must embed UnimplementedRaftVotingServer
// for forward compatibility
type RaftVotingServer interface {
	RequestVotes(context.Context, *Term) (*Vote, error)
}

// UnimplementedRaftVotingServer must be embedded to have forward compatible implementations.
type UnimplementedRaftVotingServer struct {
}

func (UnimplementedRaftVotingServer) RequestVotes(context.Context, *Term) (*Vote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVotes not implemented")
}
func (UnimplementedRaftVotingServer) mustEmbedUnimplementedRaftVotingServer() {}

// UnsafeRaftVotingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftVotingServer will
// result in compilation errors.
type UnsafeRaftVotingServer interface {
	mustEmbedUnimplementedRaftVotingServer()
}

func RegisterRaftVotingServer(s grpc.ServiceRegistrar, srv RaftVotingServer) {
	s.RegisterService(&RaftVoting_ServiceDesc, srv)
}

func _RaftVoting_RequestVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Term)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftVotingServer).RequestVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.RaftVoting/RequestVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftVotingServer).RequestVotes(ctx, req.(*Term))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftVoting_ServiceDesc is the grpc.ServiceDesc for RaftVoting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftVoting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.RaftVoting",
	HandlerType: (*RaftVotingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVotes",
			Handler:    _RaftVoting_RequestVotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// DataSyncClient is the client API for DataSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSyncClient interface {
	NewEvent(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Ok, error)
	SaveOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Ok, error)
	GetSyncData(ctx context.Context, in *Ok, opts ...grpc.CallOption) (*Order, error)
	GetPacketAddresses(ctx context.Context, in *Ok, opts ...grpc.CallOption) (*Peers, error)
	GetNetworkView(ctx context.Context, in *Ok, opts ...grpc.CallOption) (*Peers, error)
}

type dataSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSyncClient(cc grpc.ClientConnInterface) DataSyncClient {
	return &dataSyncClient{cc}
}

func (c *dataSyncClient) NewEvent(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/com.DataSync/NewEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncClient) SaveOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/com.DataSync/SaveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncClient) GetSyncData(ctx context.Context, in *Ok, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/com.DataSync/GetSyncData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncClient) GetPacketAddresses(ctx context.Context, in *Ok, opts ...grpc.CallOption) (*Peers, error) {
	out := new(Peers)
	err := c.cc.Invoke(ctx, "/com.DataSync/GetPacketAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncClient) GetNetworkView(ctx context.Context, in *Ok, opts ...grpc.CallOption) (*Peers, error) {
	out := new(Peers)
	err := c.cc.Invoke(ctx, "/com.DataSync/GetNetworkView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSyncServer is the server API for DataSync service.
// All implementations must embed UnimplementedDataSyncServer
// for forward compatibility
type DataSyncServer interface {
	NewEvent(context.Context, *Order) (*Ok, error)
	SaveOrder(context.Context, *Order) (*Ok, error)
	GetSyncData(context.Context, *Ok) (*Order, error)
	GetPacketAddresses(context.Context, *Ok) (*Peers, error)
	GetNetworkView(context.Context, *Ok) (*Peers, error)
}

// UnimplementedDataSyncServer must be embedded to have forward compatible implementations.
type UnimplementedDataSyncServer struct {
}

func (UnimplementedDataSyncServer) NewEvent(context.Context, *Order) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEvent not implemented")
}
func (UnimplementedDataSyncServer) SaveOrder(context.Context, *Order) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrder not implemented")
}
func (UnimplementedDataSyncServer) GetSyncData(context.Context, *Ok) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncData not implemented")
}
func (UnimplementedDataSyncServer) GetPacketAddresses(context.Context, *Ok) (*Peers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPacketAddresses not implemented")
}
func (UnimplementedDataSyncServer) GetNetworkView(context.Context, *Ok) (*Peers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkView not implemented")
}
func (UnimplementedDataSyncServer) mustEmbedUnimplementedDataSyncServer() {}

// UnsafeDataSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSyncServer will
// result in compilation errors.
type UnsafeDataSyncServer interface {
	mustEmbedUnimplementedDataSyncServer()
}

func RegisterDataSyncServer(s grpc.ServiceRegistrar, srv DataSyncServer) {
	s.RegisterService(&DataSync_ServiceDesc, srv)
}

func _DataSync_NewEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServer).NewEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.DataSync/NewEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServer).NewEvent(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSync_SaveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServer).SaveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.DataSync/SaveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServer).SaveOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSync_GetSyncData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ok)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServer).GetSyncData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.DataSync/GetSyncData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServer).GetSyncData(ctx, req.(*Ok))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSync_GetPacketAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ok)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServer).GetPacketAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.DataSync/GetPacketAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServer).GetPacketAddresses(ctx, req.(*Ok))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSync_GetNetworkView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ok)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServer).GetNetworkView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.DataSync/GetNetworkView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServer).GetNetworkView(ctx, req.(*Ok))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSync_ServiceDesc is the grpc.ServiceDesc for DataSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.DataSync",
	HandlerType: (*DataSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewEvent",
			Handler:    _DataSync_NewEvent_Handler,
		},
		{
			MethodName: "SaveOrder",
			Handler:    _DataSync_SaveOrder_Handler,
		},
		{
			MethodName: "GetSyncData",
			Handler:    _DataSync_GetSyncData_Handler,
		},
		{
			MethodName: "GetPacketAddresses",
			Handler:    _DataSync_GetPacketAddresses_Handler,
		},
		{
			MethodName: "GetNetworkView",
			Handler:    _DataSync_GetNetworkView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
